diff --git a/app/auth/login/page.tsx b/app/auth/login/page.tsx
index 5b7095c..025963c 100644
--- a/app/auth/login/page.tsx
+++ b/app/auth/login/page.tsx
@@ -17,13 +17,10 @@ import {
   EyeOff,
   Loader2
 } from 'lucide-react';
-import { signInWithEmailAndPassword } from 'firebase/auth';
-import { doc, getDoc } from 'firebase/firestore';
-import { auth, db } from '@/lib/firebase';
-import { toast } from 'sonner';
-import type { User } from '@/types/index';
+import { useAuth } from '@/contexts/auth-context';
 
 export default function LoginPage() {
+  const { user, loading: authLoading } = useAuth();
   const router = useRouter();
   const [loading, setLoading] = useState(false);
   const [showPassword, setShowPassword] = useState(false);
@@ -33,6 +30,29 @@ export default function LoginPage() {
     password: ''
   });
 
+  useEffect(() => {
+    if (!authLoading && user) {
+      // Redirect based on user role
+      switch (user.role) {
+        case 'employee':
+          router.push('/employee/dashboard');
+          break;
+        case 'manager':
+          router.push('/manager/dashboard');
+          break;
+        case 'employer':
+          router.push('/employer/dashboard');
+          break;
+        case 'hr':
+        case 'admin':
+          router.push('/employer/analytics');
+          break;
+        default:
+          router.push('/employee/dashboard');
+      }
+    }
+  }, [user, authLoading, router]);
+
   const handleInputChange = (field: string, value: string) => {
     setFormData(prev => ({ ...prev, [field]: value }));
     if (error) setError(''); // Clear error when user starts typing
@@ -43,86 +63,29 @@ export default function LoginPage() {
     setLoading(true);
     setError('');
 
-    // Validation
-    if (!formData.email || !formData.password) {
-      setError('Please fill in all fields');
-      setLoading(false);
-      return;
-    }
-
-    if (!formData.email.includes('@')) {
-      setError('Please enter a valid email address');
-      setLoading(false);
-      return;
-    }
-
     try {
-      // Sign in with Firebase Auth
-      const userCredential = await signInWithEmailAndPassword(
-        auth,
-        formData.email,
-        formData.password
-      );
-
-      if (userCredential.user) {
-        // Get user data from Firestore
-        const userDoc = await getDoc(doc(db, 'users', userCredential.user.uid));
-        
-        if (userDoc.exists()) {
-          const userData = { id: userDoc.id, ...userDoc.data() } as User;
-          
-          // Update last login
-          // await updateDoc(doc(db, 'users', userCredential.user.uid), {
-          //   last_login: new Date().toISOString()
-          // });
-
-          toast.success(`Welcome back, ${userData.first_name}!`);
-
-          // Redirect based on user role
-          switch (userData.role) {
-            case 'employee':
-              router.push('/employee/dashboard');
-              break;
-            case 'manager':
-              router.push('/manager/dashboard');
-              break;
-            case 'employer':
-              router.push('/employer/dashboard');
-              break;
-            case 'hr':
-            case 'admin':
-              router.push('/employer/analytics');
-              break;
-            default:
-              router.push('/employee/dashboard');
-          }
-        } else {
-          setError('User profile not found. Please contact your administrator.');
-        }
+      const response = await fetch('/api/auth/login', {
+        method: 'POST',
+        headers: {
+          'Content-Type': 'application/json',
+        },
+        body: JSON.stringify(formData),
+      });
+
+      const data = await response.json();
+
+      if (!response.ok) {
+        setError(data.error || 'An unknown error occurred.');
+        return;
       }
+
+      // The server has set the session cookie. Now we need to get the user data
+      // from the auth context, which will be updated automatically.
+      // We just need to wait for the loading state to be false.
+      
     } catch (error: any) {
       console.error('Login error:', error);
-      
-      // Handle specific Firebase auth errors
-      switch (error.code) {
-        case 'auth/user-not-found':
-          setError('No account found with this email address.');
-          break;
-        case 'auth/wrong-password':
-          setError('Incorrect password. Please try again.');
-          break;
-        case 'auth/invalid-email':
-          setError('Invalid email address format.');
-          break;
-        case 'auth/user-disabled':
-          setError('This account has been disabled. Please contact support.');
-          break;
-        case 'auth/too-many-requests':
-          setError('Too many failed attempts. Please try again later.');
-          break;
-        default:
-          setError('Login failed. Please check your credentials and try again.');
-      }
+      setError('Login failed. Please check your credentials and try again.');
     } finally {
       setLoading(false);
     }
diff --git a/app/auth/signup/page.tsx b/app/auth/signup/page.tsx
index a18ea2c..734d332 100644
--- a/app/auth/signup/page.tsx
+++ b/app/auth/signup/page.tsx
@@ -20,9 +20,7 @@ import {
   EyeOff,
   Loader2
 } from 'lucide-react';
-import { createUserWithEmailAndPassword } from 'firebase/auth';
-import { doc, setDoc } from 'firebase/firestore';
-import { auth, db } from '@/lib/firebase';
+
 import { toast } from 'sonner';
 
 export default function SignUpPage() {
@@ -36,7 +34,7 @@ export default function SignUpPage() {
     email: '',
     password: '',
     confirmPassword: '',
-    role: 'employer', // Fixed to employer only
+    role: 'employer',
     companyName: '',
     companySize: '',
     industry: ''
@@ -52,96 +50,39 @@ export default function SignUpPage() {
     setLoading(true);
     setError('');
 
-    // Validation
-    if (!formData.firstName || !formData.lastName || !formData.email || !formData.password || !formData.companyName) {
-      setError('Please fill in all required fields');
-      setLoading(false);
-      return;
-    }
-
     if (formData.password !== formData.confirmPassword) {
       setError('Passwords do not match');
       setLoading(false);
       return;
     }
 
-    if (formData.password.length < 6) {
-      setError('Password must be at least 6 characters');
-      setLoading(false);
-      return;
-    }
-
-    if (!formData.email.includes('@')) {
-      setError('Please enter a valid email address');
-      setLoading(false);
-      return;
-    }
-
     try {
-      // Create user account
-      const userCredential = await createUserWithEmailAndPassword(
-        auth,
-        formData.email,
-        formData.password
-      );
-
-      if (userCredential.user) {
-        // Generate unique company ID
-        const companyId = `company_${userCredential.user.uid}`;
-        
-        // Create company document
-        await setDoc(doc(db, 'companies', companyId), {
-          id: companyId,
-          name: formData.companyName,
-          size: formData.companySize || 'Not specified',
-          industry: formData.industry || 'Not specified',
-          owner_id: userCredential.user.uid,
-          created_at: new Date().toISOString(),
-          updated_at: new Date().toISOString(),
-        });
+      const response = await fetch('/api/auth/register', {
+        method: 'POST',
+        headers: {
+          'Content-Type': 'application/json',
+        },
+        body: JSON.stringify(formData),
+      });
 
-        // Create employer user profile in Firestore
-        await setDoc(doc(db, 'users', userCredential.user.uid), {
-          id: userCredential.user.uid,
-          email: formData.email,
-          first_name: formData.firstName,
-          last_name: formData.lastName,
-          role: 'employer',
-          company_id: companyId,
-          company_name: formData.companyName,
-          company_size: formData.companySize || 'Not specified',
-          industry: formData.industry || 'Not specified',
-          is_active: true,
-          hierarchy_level: 0, // CEO/Owner level
-          can_view_team_reports: true,
-          can_manage_employees: true,
-          can_approve_leaves: true,
-          is_department_head: true,
-          skip_level_access: true,
-          direct_reports: [],
-          created_at: new Date().toISOString(),
-          updated_at: new Date().toISOString(),
-        });
+      const data = await response.json();
 
-        toast.success('Company account created successfully!');
-        router.push('/employer/dashboard');
+      if (!response.ok) {
+        if (data.error) {
+            const errorMessages = Object.values(data.error).flat().join(', ');
+            setError(errorMessages);
+        } else {
+            setError(data.message || 'An unknown error occurred.');
+        }
+        return;
       }
+
+      toast.success(data.message);
+      router.push('/employer/dashboard');
+
     } catch (error: any) {
       console.error('Signup error:', error);
-      
-      switch (error.code) {
-        case 'auth/email-already-in-use':
-          setError('An account with this email already exists.');
-          break;
-        case 'auth/invalid-email':
-          setError('Invalid email address format.');
-          break;
-        case 'auth/weak-password':
-          setError('Password is too weak. Please choose a stronger password.');
-          break;
-        default:
-          setError('Failed to create account. Please try again.');
-      }
+      setError('Failed to create account. Please try again.');
     } finally {
       setLoading(false);
     }
@@ -279,6 +220,18 @@ export default function SignUpPage() {
                 </div>
               </div>
 
+              <div className="space-y-2">
+                <Label htmlFor="role">Your Role</Label>
+                <Select value={formData.role} onValueChange={(value) => handleInputChange('role', value)}>
+                  <SelectTrigger>
+                    <SelectValue placeholder="Select your role" />
+                  </SelectTrigger>
+                  <SelectContent>
+                    <SelectItem value="employer">Employer</SelectItem>
+                  </SelectContent>
+                </Select>
+              </div>
+
               <div className="space-y-2">
                 <Label htmlFor="password">Password *</Label>
                 <div className="relative">
@@ -306,15 +259,26 @@ export default function SignUpPage() {
 
               <div className="space-y-2">
                 <Label htmlFor="confirmPassword">Confirm Password *</Label>
-                <Input
-                  id="confirmPassword"
-                  type="password"
-                  placeholder="Confirm your password"
-                  value={formData.confirmPassword}
-                  onChange={(e) => handleInputChange('confirmPassword', e.target.value)}
-                  disabled={loading}
-                  required
-                />
+                <div className="relative">
+                  <Input
+                    id="confirmPassword"
+                    type={showPassword ? 'text' : 'password'}
+                    placeholder="Confirm your password"
+                    value={formData.confirmPassword}
+                    onChange={(e) => handleInputChange('confirmPassword', e.target.value)}
+                    className="pr-10"
+                    disabled={loading}
+                    required
+                  />
+                  <button
+                    type="button"
+                    onClick={() => setShowPassword(!showPassword)}
+                    className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
+                    disabled={loading}
+                  >
+                    {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
+                  </button>
+                </div>
               </div>
 
               <Button type="submit" className="w-full" disabled={loading}>
diff --git a/app/employee/dashboard/page.tsx b/app/employee/dashboard/page.tsx
index cd6976b..0b28ed9 100644
--- a/app/employee/dashboard/page.tsx
+++ b/app/employee/dashboard/page.tsx
@@ -23,8 +23,9 @@ import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContai
 import { collection, query, where, getDocs } from 'firebase/firestore';
 import type { MentalHealthReport } from '@/types';
 import { auth, db } from '@/lib/firebase';
+import { withAuth } from '@/components/auth/with-auth';
 
-export default function EmployeeDashboard() {
+function EmployeeDashboard() {
   const { user, loading: userLoading } = useUser();
   const [reports, setReports] = useState<MentalHealthReport[]>([]);
   const [loading, setLoading] = useState(true);
@@ -38,34 +39,10 @@ export default function EmployeeDashboard() {
   const router = useRouter();
 
   useEffect(() => {
-    if (!userLoading && !user) {
-      router.push('/');
-      return;
-    }
-
-    if (user && user.role !== 'employee') {
-      // Redirect non-employees to their appropriate dashboard
-      switch (user.role) {
-        case 'employer':
-          router.push('/employer/dashboard');
-          break;
-        case 'manager':
-          router.push('/manager/dashboard');
-          break;
-        case 'hr':
-        case 'admin':
-          router.push('/employer/analytics');
-          break;
-        default:
-          router.push('/');
-      }
-      return;
-    }
-
     if (user) {
       fetchReports();
     }
-  }, [user, userLoading, router]);
+  }, [user]);
 
   const fetchReports = async () => {
     try {
@@ -75,7 +52,7 @@ export default function EmployeeDashboard() {
         return;
       }
 
-      console.log('Fetching reports for user:', user.id);
+      
 
       // Fetch reports from Firestore where employee_id matches current user's ID
       const reportsRef = collection(db, 'mental_health_reports');
@@ -437,3 +414,5 @@ export default function EmployeeDashboard() {
     </div>
   );
 }
+
+export default withAuth(EmployeeDashboard, ['employee']);
\ No newline at end of file
diff --git a/app/employer/dashboard/page.tsx b/app/employer/dashboard/page.tsx
index 3596050..e6bc455 100644
--- a/app/employer/dashboard/page.tsx
+++ b/app/employer/dashboard/page.tsx
@@ -34,8 +34,9 @@ import {
   limit
 } from 'firebase/firestore';
 import { db } from '@/lib/firebase';
+import { withAuth } from '@/components/auth/with-auth';
 
-export default function EmployerDashboardPage() {
+function EmployerDashboardPage() {
   const { user, loading: userLoading } = useUser();
   const router = useRouter();
 
@@ -57,25 +58,10 @@ export default function EmployerDashboardPage() {
   const [timeRange, setTimeRange] = useState<'7d' | '30d' | '90d'>('30d');
 
   useEffect(() => {
-    if (!userLoading) {
-      if (!user) {
-        router.push('/auth/login');
-        return;
-      }
-
-      const allowedRoles = ['employer', 'admin', 'hr'];
-
-      if (!allowedRoles.includes(user.role)) {
-        toast.error('Access denied. Employer role required.');
-        router.push('/');
-        return;
-      }
-
-      if (user.company_id) {
+    if (!userLoading && user && user.company_id) {
         initializeDashboard();
-      }
     }
-  }, [user, userLoading, router]);
+  }, [user, userLoading]);
 
   const initializeDashboard = async () => {
     if (!user?.company_id) {
@@ -382,10 +368,6 @@ export default function EmployerDashboardPage() {
     );
   }
 
-  if (!user || user.role !== 'employer') {
-    return null;
-  }
-
   return (
     <div className="min-h-screen bg-gray-50">
       <Navbar user={user} />
@@ -740,3 +722,5 @@ export default function EmployerDashboardPage() {
     </div>
   );
 }
+
+export default withAuth(EmployerDashboardPage, ['employer', 'admin', 'hr']);
diff --git a/app/manager/dashboard/page.tsx b/app/manager/dashboard/page.tsx
index 4e07d30..26520f8 100644
--- a/app/manager/dashboard/page.tsx
+++ b/app/manager/dashboard/page.tsx
@@ -1,75 +1,33 @@
 'use client';
 
-import { useEffect, useState } from 'react';
 import { useRouter } from 'next/navigation';
 import { useUser } from '@/hooks/use-user';
 import { Navbar } from '@/components/shared/navbar';
 import { ManagerDashboard } from '@/components/hierarchy/manager-dashboard';
-import { getManagerPermissions } from '@/lib/hierarchy-service';
-import { getDemoUser } from '@/lib/demo-data';
+import { withAuth } from '@/components/auth/with-auth';
 import type { User } from '@/types/index';
 
-export default function ManagerDashboardPage() {
-  const { user, loading: userLoading } = useUser();
+function ManagerDashboardPage() {
+  const { user } = useUser();
   const router = useRouter();
-  const [loading, setLoading] = useState(true);
-
-  useEffect(() => {
-    // For demo mode, allow access without authentication
-    if (!userLoading) {
-      if (!user) {
-        // Create a demo manager user
-        const demoUser = {
-          id: 'demo-manager-1',
-          email: 'manager@demo.com',
-          first_name: 'Demo',
-          last_name: 'Manager',
-          role: 'manager' as const,
-          company_id: 'demo-company',
-          department: 'Engineering',
-          position: 'Engineering Manager',
-          is_active: true,
-          created_at: new Date().toISOString(),
-          updated_at: new Date().toISOString(),
-          hierarchy_level: 3,
-          can_view_team_reports: true,
-          can_manage_employees: true,
-          direct_reports: ['demo-emp-1', 'demo-emp-2', 'demo-emp-3']
-        };
-        // In a real app, you'd set this in context, but for demo we'll just continue
-      }
-      setLoading(false);
-    }
-  }, [user, userLoading, router]);
 
   const handleViewTeamMember = (employee: User) => {
     // Navigate to team member's profile or reports
     router.push(`/manager/team-member/${employee.id}`);
   };
 
-  if (userLoading || loading) {
-    return (
-      <div className="min-h-screen bg-gray-50">
-        <div className="flex items-center justify-center h-64">
-          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600"></div>
-        </div>
-      </div>
-    );
-  }
-
-  // Use demo user if no real user is available
-  const currentUser = user || getDemoUser('manager');
-
   return (
     <div className="min-h-screen bg-gray-50">
-      <Navbar user={currentUser} />
+      <Navbar user={user} />
       
       <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
         <ManagerDashboard 
-          manager={currentUser} 
+          manager={user} 
           onViewTeamMember={handleViewTeamMember}
         />
       </div>
     </div>
   );
 }
+
+export default withAuth(ManagerDashboardPage, ['manager', 'admin']);
diff --git a/contexts/auth-context.tsx b/contexts/auth-context.tsx
index 7ceb843..d33d4f4 100644
--- a/contexts/auth-context.tsx
+++ b/contexts/auth-context.tsx
@@ -4,7 +4,7 @@ import { createContext, useContext, useEffect, useState } from 'react';
 import { onAuthStateChanged, signOut as firebaseSignOut } from 'firebase/auth';
 import { doc, getDoc } from 'firebase/firestore';
 import { auth, db } from '@/lib/firebase';
-import type { User } from '@/types/index';
+import { toast } from 'sonner';
 
 interface AuthContextType {
   user: User | null;
@@ -48,24 +48,31 @@ export function AuthProvider({ children }: { children: React.ReactNode }) {
     const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {
       try {
         if (firebaseUser) {
-          // Get user data from Firestore
-          const userDoc = await getDoc(doc(db, 'users', firebaseUser.uid));
-          if (userDoc.exists()) {
-            const userData = { id: userDoc.id, ...userDoc.data() } as User;
-            setUser(userData);
-          } else {
-            // User exists in Auth but not in Firestore
-            console.warn('User exists in Auth but not in Firestore');
-            await firebaseSignOut(auth); // Sign out if user data is missing
-            setUser(null);
-          }
+          const userDocRef = doc(db, 'users', firebaseUser.uid);
+          const unsubscribeSnapshot = onSnapshot(userDocRef, (doc) => {
+            if (doc.exists()) {
+              const userData = { id: doc.id, ...doc.data() } as User;
+              setUser(userData);
+            } else {
+              console.warn('User exists in Auth but not in Firestore');
+              toast.error('Your user data could not be found. Please contact support.');
+              firebaseSignOut(auth);
+              setUser(null);
+            }
+            setLoading(false);
+          }, (error) => {
+            console.error('Error in user snapshot listener:', error);
+            toast.error('There was an error fetching your user data.');
+            setLoading(false);
+          });
+          return () => unsubscribeSnapshot();
         } else {
           setUser(null);
+          setLoading(false);
         }
       } catch (error) {
         console.error('Error in auth state change:', error);
         setUser(null);
-      } finally {
         setLoading(false);
       }
     });
